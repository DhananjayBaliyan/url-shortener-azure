# This is the GitHub Actions workflow file.
# It defines the automated CI/CD pipeline.

name: Build and Deploy to AKS

# It triggers on any push to the 'main' branch.
# I've also added 'workflow_dispatch' which lets you run it manually from the Actions tab.
on:
  push:
    branches:
      - main
  workflow_dispatch:

# These are environment variables that will be used throughout the workflow.
env:
  AZURE_RESOURCE_GROUP: k8s-portfolio-rg
  AZURE_CONTAINER_REGISTRY: dhananjayk8sprojectacr
  AZURE_CLUSTER_NAME: shortly-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Check out the code from your repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to Azure using the secret we created
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # --- NEW STEP ---
    # Step 3: Log in to the Azure Container Registry
    # This is needed so the 'docker push' command will work.
    - name: Log in to ACR
      run: az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    # --- UPDATED STEP ---
    # Step 4: Build, tag, and push the FRONTEND Docker image
    # This now uses standard docker commands instead of 'az acr build'.
    - name: Build and push frontend image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend-service:${{ github.sha }} -f ./frontend/Dockerfile ./frontend
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend-service:${{ github.sha }}

    # --- UPDATED STEP ---
    # Step 5: Build, tag, and push the BACKEND Docker image
    - name: Build and push backend image
      run: |
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend-service:${{ github.sha }} -f ./backend/Dockerfile ./backend
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend-service:${{ github.sha }}

    # Step 6: Update the deployment files with the new image tags
    - name: Update Kubernetes manifests with new image tags
      run: |
        sed -i 's|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend-service:.*|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend-service:${{ github.sha }}|' frontend-deployment.yaml
        sed -i 's|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend-service:.*|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend-service:${{ github.sha }}|' backend-deployment.yaml

    # Step 7: Connect to the AKS cluster
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ env.AZURE_CLUSTER_NAME }}

    # Step 8: Deploy all the updated configurations to Kubernetes
    - name: Deploy to AKS
      run: |
        kubectl apply -f redis-deployment.yaml
        kubectl apply -f backend-deployment.yaml
        kubectl apply -f frontend-deployment.yaml
        kubectl apply -f ingress.yaml
